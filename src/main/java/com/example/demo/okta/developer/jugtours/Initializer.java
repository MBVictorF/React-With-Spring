/*
package com.example.demo.okta.developer.jugtours;

*/
/*import com.example.demo.okta.developer.jugtours.model.Product;
import com.example.demo.okta.developer.jugtours.model.ProductRepository;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import java.math.BigDecimal;
import java.util.List;

@Component
class Initializer implements CommandLineRunner {

    private final ProductRepository repository;

    public Initializer(ProductRepository repository) {
        this.repository = repository;
    }

    @Override
    public void run(String... args) {
        debugJPARepository();
        displayAllProducts();
    }

    *//*
*/
/**
     * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
     *//*
*/
/*
    private void debugJPARepository() {
        System.out.println("\n=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê JPA REPOSITORY ===");

        try {
            // –ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π
            long count = repository.count();
            System.out.printf("1. Repository.count(): %d%n", count);

            // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            List<Product> products = repository.findAll();
            System.out.printf("2. Repository.findAll().size(): %d%n", products.size());

            if (!products.isEmpty()) {
                System.out.println("3. –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:");
                products.forEach(product ->
                        System.out.printf("   - ID: %d, Name: %s, Price: %s%n",
                                product.getId(),
                                product.getName(),
                                product.getPrice()
                        )
                );
            } else {
                System.out.println("‚ùå –ü—Ä–æ–¥—É–∫—Ç—ã –≤ –±–∞–∑–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç");
            }

        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –≤ JPA Repository:");
            e.printStackTrace();
        }
    }

    *//*
*/
/**
     * –í—ã–≤–æ–¥ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ
     *//*
*/
/*
    private void displayAllProducts() {
        System.out.println("\n=== –§–ò–ù–ê–õ–¨–ù–´–ô –°–ü–ò–°–û–ö –ü–†–û–î–£–ö–¢–û–í (JPA) ===");

        List<Product> allProducts = repository.findAll();

        if (allProducts.isEmpty()) {
            System.out.println("‚ùå –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç...");
            Product testProduct = new Product(
                    "Test Product",
                    "Test Description",
                    new BigDecimal("99.99"),
                    "/images/test.jpg"
            );
            Product saved = repository.save(testProduct);
            System.out.printf("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω —Å ID: %d%n", saved.getId());
        } else {
            System.out.printf("‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: %d%n", allProducts.size());
            allProducts.forEach(product ->
                    System.out.printf("   - ID: %d, Name: %s, Price: %s%n",
                            product.getId(),
                            product.getName(),
                            product.getPrice()
                    )
            );
        }
    }
}*//*


import com.example.demo.okta.developer.jugtours.model.Product;
import com.example.demo.okta.developer.jugtours.model.ProductRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.context.event.EventListener;
import org.springframework.stereotype.Component;

import java.util.List;

@Component
@RequiredArgsConstructor
class ProductInitializer {

    private final ProductRepository repository;

    @EventListener(ApplicationReadyEvent.class)
    public void showProductsOnStartup() {
        System.out.println("üì¶ –î–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ user_product:");

        List<Product> products = repository.findAll();

        if (products.isEmpty()) {
            System.out.println("‚ö† –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞!");
        } else {
            products.forEach(product ->
                    System.out.printf("‚û° ID: %d, Name: %s, Price: %s, Image: %s%n",
                            product.getId(),
                            product.getName(),
                            product.getPrice(),
                            product.getImageUrl()
                    )
            );
        }
    }
}
*/
